# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule FortnoxEx.Connection do
  @moduledoc """
  Handle Tesla connections for FortnoxEx.
  """

  use Tesla

  @doc """
  Configure an authenticated client connection

  # Returns

  Tesla.Env.client
  """
  @spec new(String.t, String.t) :: Tesla.Env.client
  def new(client_secret, access_token) do
    headers = [
      {"Client-Secret", client_secret},
      {"Access-Token", access_token},
    ]

    middleware = [
      {Tesla.Middleware.BaseUrl, "https://api.fortnox.se/3"},
      {Tesla.Middleware.Logger, debug: false},
      {Tesla.Middleware.Headers, headers},
      {Tesla.Middleware.EncodeJson, engine: Poison},
      {
        Tesla.Middleware.Fuse,
        name: access_token,
        opts: {{:standard, 200, 60_000}, {:reset, 60_000}},
        keep_original_error: false,
        should_melt: fn
          {:ok, %{status: status}} when status in [429] -> true
          {:ok, _} -> false
          {:error, _} -> false
        end
      }
    ]

    adapter = {Tesla.Adapter.Hackney, [recv_timeout: 30_000]}
    Tesla.client(middleware, adapter)
  end

  @doc """
  Gets an access token given a client secret and an authorization code

  ## Examples

    iex> get_access_token(client_secret, authorization_code)
    {:ok, "65cc2c87-de81-45d6-c792-aad68528ff17"}

    iex> get_access_token(client_secret, authorization_code)
    {:error, %{"Code" => 2000721, "Error" => 1, "Message" => "Auktoriseringskoden är redan förbrukad."}}

  """
  @spec get_access_token(String.t, String.t) :: {:ok, String.t}
  def get_access_token(client_secret, authorization_code) do
    headers = [
      {"Client-Secret", client_secret},
      {"Authorization-Code", authorization_code}
    ]

    middleware = [
      {Tesla.Middleware.BaseUrl, "https://api.fortnox.se/3"},
      {Tesla.Middleware.Logger, debug: false},
      {Tesla.Middleware.Headers, headers},
      {Tesla.Middleware.EncodeJson, engine: Poison},
    ]

    adapter = {Tesla.Adapter.Hackney, [recv_timeout: 30_000]}
    client = Tesla.client(middleware, adapter)

    Tesla.get(client, "/customers")
    |> handle_authorization_response()
  end

  defp handle_authorization_response({:ok, env}) do
    env
    |> Map.get(:body)
    |> Poison.decode!()
    |> case do
         %{
           "Authorization" => %{
             "AccessToken" => access_token
           }
         } -> {:ok, access_token}
         error -> {:error, error}
       end

  end

  defp handle_authorization_response(error), do: error
end
